Binding Interfaces
---------------------------
	Java Bindings Library
		- less client code
		- required more preparation/planning
	
	Java Native Interface (JNI)
		- verbose
		- reflection-style API
		

Java Project Types
---------------------------
	WebView -> uses Razor templating engine which is deployed in the app
	OpenGL -> As in gaming, weird
	Single-View App -> Single panel app
	Bindings-Library -> project for creating an Android class library that binds an Android/Java jar
		- interesting!
	
All user interactions are grouped into Activities
	- analagous to a use case
	UI + code
	
UI -> all derive from Views

Layouts
	LinearLayout: single row or column of boxes
	- requires that you set the layout width and layout height of each element else runtime exception
	- common and flexible layout ex:
		<LinearLayout ...>
			<TextView android:layout_width="match_parent" android:layout_height="wrap_content" ... />
		</LinearLayout>
	- Width by pixel density will about be the same size on a 200dpi screen as a 500 dpi screen
		- Android best practice: use density and dependent pixels to specify sizes
		Ex: <Button android:layout_width="100dp" ... />
	- avoid:
		- fill_parent [Obsolete]
		- fixed pixel sizes
		
		
	GridLayout: Child Views are in rows and columns
	RelativeLayout: specify position of the child views relative to neighbors
		- ex: this child goes to the left of that other one
		- ex: this child is on the right edge of the screen
	NestedLayout: can nest sub layouts together
		- ex: LinearLayout on left, GridLayout to the right of it, some GridLayout at the bottom
	
	UI elements are typically laid out in an xml layout file
	Ex: Pi.axml
		<LinearLayout ...>
			<TextView ... />
			<EditText ... />
			<Button   ... />
			<TextView ... />
		</LinearLayout>

	Resources folder in project
		contains: Images, layout files, strings
		
Activities
----------------------------------
	When one activity wants to kick off another activity
		1 - creates an intent with any required info (context)
		2 - sends intent to Android
		3 - Android starts that activity for you

	Usually an intent === what you want to do specifically (load details for some thing)
	may be generic "show map for these coordinates"

Passing arguments from one activity to another
-------------------------------------
Passed as Bundles
	- Only serializable data can be passed.
		- simple types
		- ISerializable
		- IParcelable(??)
	- Begone byref!
	- Passed as key-value pairs (serialized Json type can be a single value)
	- Pass arguments to activity
		- Ex:
			var bundle = new Bundle();
			bundle.PutInt("ContactId", 123456789);
			var intent = new Intent();
			intent.PutExtras(bundle);
		- Ex:
			var intent = new Intent();
			intent.PutExtra("ContactId", 123456789);
	- Get args for activity
		- Ex: 
			int id = base.Intent.Extras.GetInt("ContactId", -1);
		- Ex: 
			int id = base.Intent.GetIntExtra("ContactId", -1);

Request-Response Activities
------------------------------------------
Source Activity
	- overrides OnActivityResult
		- gets called when activity calls Finish() or when user hits back
	- initiates with StartActivityForResult(intent, requestCode)
	- RequestCode - integer passed to activity to identify it
		- magic number :/
	- Result Code - enumerable code to connote success or failure
		- Enum named "Result"
			- Ok
			- Cancel
			- First User (first useable custom value for result codes)
	
	Calling SetResult does not cause activity to end
	public void SetResult(Result resultCode);
	public void SetResult(Result resultCode, Intent data);
	- if you called Finish() then resultCode defaults to Cancelled


Target Activity
	- calls SetResult (along with extras) when done

Intents (triggering new activity)
-----------------------------------------
	- explicit intents
		- mainly for calls within your APK
	- implicit intents
		- for calls outside of your APK (when you don't know the precise activity)
		- verify as can be prone to errors
			var intent = new Intent();
			...
			if (intent.ResolveActivity(PackageManager) != null)
			{
				StartActivity(intent);
			}
		- can contain
			- Action
			- Data
			- MIME Type
			- Categories
			- Extras
		- Android documentation will tell what is needed for a given intent
		- Ex: show a location on a map
			Action: ACTION_VIEW
			Data URI Scheme: geo:latitude,longitude
				Android.Net.Uri.Parse("geo:47.6,-122.3")

	Intent Actions
		View: can browse on web, open a location, or open a music file		
		Send To: email, text
		Pick: select image, select contact
		Ex:
			Intent.ActionView => android.intent.action.VIEW (show some info to the user)
			Intent.ActionDial => android.intent.action.DIAL (dial the phone)
			Intent.ActionEdit => android.intent.action.EDIT (let the user edit some data)
			Intent.ActionSendTo => android.intent.action.SENDTO (send a message)
			...
		Can be set in two different ways:
			- new Intent(actionName)
			- intent.SetAction(actionName)
		
	Intent Data
		- data for a phone dialer activity
			Ex: intent.SetData("tel:(855) 926-2746");
		- data for a browser activity
			Ex: intent.SetData(Android.Net.Uri.Parse("https://example.com"));
	MIME Type
		**SetData and SetType are mutually exclusive!
		add a calendar event
			- intent.SetType("vnd.android.cursor.dir/event");
		select an image => "image/*"
			- intent.SetType("image/*");
			- intent.SetType("image/jpeg");
	Categories
		**Can be called multiple times if you need to add multiple categories
		- Preference (aka a settings panel)
			Ex: intent.AddCategory(Intent.CategoryPreference);
		- Tab (intended to live inside a tab)
		- Openable (a picker)
	Extras
		Intent.ExtraEmail="android.intent.extra.EMAIL" (List of addresses for an email)
		MediaStore.ExtraOutput="output" (location for camera to save)
		AlarmClock.ExtraRingtone="android.intent.extra.alarm.RINGTONE" (Tone to play for an alarm)
		EventsColumns.Title="title" (Calendar event title)
		Ex:
			intent.PutExtra(Intent.ExtraEmail, new string[] { "hello@xamarin.com" });
			intent.PutExtra(Intent.ExtraSubject, "How are you?");

List Views and Adapters
-----------------------------------
	Populate a ListView using an ArrayAdapter
		ListView is the component that shows a series of rows belonging to a collection of items
		An Adapter is a class that creates and populates the rows in a ListView
		
		ArrayAdapter simply returns ToString() on the class in the collection/list of items
			- good for prototyping
			Ex:
				//this == context (i.e. the activity that's using it)
				//layoutFileId == Id of the layout file to use for each row (Resources.blah.blah)
				var data = new List<Instructor>();
				var adapter = new ArrayAdapter<Instructor>(this, layoutFileId, data);
				var list = FindViewById<ListView>(Resource.Id.myList);
				list.Adapter = adapter;

	Handling list-item click events

	Implement a custom adapter

	Use layout recycling and the view-holder pattern

	Enable fast scrolling and code a section indexer

	BaseAdapter<T>
		abstract T this[position]
		abstract int Count
		abstract long GetItemId -> some kind of unique id
		GetView method: produce rows in a list
			1 - inflating a layout file
			2 - looks up views in the heirarchy
			3 - populating view with data

Memory saving techniques
	Reusing layouts -> view recycling
	Cache view references to increase performance
		- use a class named ViewHolder to prevent repeated lookups finding view by id
	Cache some external assets to prevent repeated CPU/IO intensive tasks (like loading Drawable images, etc)

Section Label/Indexing for faster scrolling
	---------------------------------------------
	GetSections returns Java.Object[]
	Data	List position	Section index	Section label
	Alex	0				0				A
	Allen	1				0				A
	Ann		2				0				A
	Carl	3				1				C
	Carol	4				1				C
	...

Toolbar and App Bar
-----------------------------------------------------------------
Two Toolbar libraries
	Modern
		- android.widget.Toolbar -> Android 21+
	Support
		- android.support.v7.widget.Toolbar -> legacy
		requires compatibility theme for <application android:theme="@style/Theme.AppCompat">
		must add xmlns entry for the legacy library. 
			Ex: <LinearLayout xmlns:app="http://schemas.android.com/apk/res-auto" ...>
					<android.support.v7.widget.Toolbar app:title="Session" ... />
				...
		xmlns prefix of "app" is a highly common convention
ICONS!!
	https://design.google.com/icons/

<group>
	Element that gives checkable behavior
	<group android:checkableBehavior="single" => radio buttons
	<group android:checkableBehavior="all" => checkboxes
	<group android:checkableBehavior="none" (default) => no checkable behavior

Toolbar vs Actionbar instantiation
	Standalone Toolbar
		Inflate via toolbar's inflate method
		Set nav icon by XML attribute
		Item click => Toolbar event
	Toolbar as app bar
		Inflate by overriding Activity method
		Set nav icon by ActionBar methods
		Item click => Override Activity method

Steps to implement an app bar (with compatability)
	1 - Inherit from AppCompatActivity
	2 - Use AppCompat.NoActionBar theme
	3 - Create and position a Toolbar
	4 - Set the Toolbar as your app bar
	5 - Populate your Toolbar
	6 - Respond to item click

Steps to add navigation
	1 - Enable navigation
	2 - Set the icon
	3 - Respond to item click

When adding "Home"/"Navigation button" menu item, listen in for...
	public class MainActivity : Activity
	{ ...
		public override bool OnOptionsItemSelected(Android.Views.IMenuItem item)
		{
			if (item.ItemId == Android.Resource.Id.Home)
			{ ...
			}
		}
	}